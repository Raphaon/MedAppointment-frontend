import { Injectable } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError, of } from 'rxjs';
import { catchError, tap, switchMap } from 'rxjs/operators';
import { DoctorProfile, MedicalSpecialty } from '@app/core/models';
import { environment } from '../../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class DoctorService {
  private readonly baseUrl = environment.apiBaseUrl;
  private doctorsEndpoint = '/doctors';

  constructor(private http: HttpClient) {}

  /**
   * R√©cup√®re tous les m√©decins
   * Essaie plusieurs endpoints en cas d'√©chec
   */
  getAllDoctors(specialty?: MedicalSpecialty): Observable<{ doctors: DoctorProfile[]; count: number }> {
    let params = new HttpParams();
    
    if (specialty) {
      params = params.set('specialty', specialty);
    }

    console.log('üì• Tentative de chargement des m√©decins...', { specialty });

    // Essayer d'abord /doctors/all
    return this.tryGetDoctors(`${this.baseUrl}${this.doctorsEndpoint}/all`, params).pipe(
      catchError((error: HttpErrorResponse) => {
        console.warn('‚ö†Ô∏è Endpoint /doctors/all non trouv√©, essai de /doctors...');
        
        // Si 404, essayer /doctors sans /all
        if (error.status === 404) {
          return this.tryGetDoctors(`${this.baseUrl}${this.doctorsEndpoint}`, params);
        }
        
        return throwError(() => error);
      }),
      tap((response: any) => {
        console.log('‚úÖ M√©decins charg√©s avec succ√®s:', response);
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Essaie de charger les m√©decins depuis un endpoint donn√©
   */
  private tryGetDoctors(url: string, params: HttpParams): Observable<{ doctors: DoctorProfile[]; count: number }> {
    console.log('üåê Requ√™te GET:', url);
    
    return this.http.get<any>(url, { params }).pipe(
      tap((response: any) => {
        console.log('üì¶ R√©ponse brute:', response);
      }),
      switchMap((response: any) => {
        // Normaliser la r√©ponse selon diff√©rents formats possibles
        if (Array.isArray(response)) {
          // Format: [doctor1, doctor2, ...]
          return of({ doctors: response, count: response.length });
        } else if (response.doctors && Array.isArray(response.doctors)) {
          // Format: { doctors: [...], count: 2 }
          return of({ doctors: response.doctors, count: response.count || response.doctors.length });
        } else if (response.data && Array.isArray(response.data)) {
          // Format: { data: [...] }
          return of({ doctors: response.data, count: response.data.length });
        } else {
          console.error('‚ùå Format de r√©ponse non reconnu:', response);
          throw new Error('Format de r√©ponse invalide du serveur');
        }
      })
    );
  }

  /**
   * R√©cup√®re le profil d'un m√©decin par son userId
   */
  getDoctorProfile(userId: string): Observable<{ profile: DoctorProfile }> {
    if (!userId || userId.trim() === '') {
      console.error('‚ùå userId manquant ou vide');
      return throwError(() => new Error('userId est requis'));
    }

    console.log('üì• Chargement du profil m√©decin:', userId);

    return this.http.get<{ profile: DoctorProfile }>(`${this.baseUrl}${this.doctorsEndpoint}/${userId}`).pipe(
      tap((response: any) => {
        console.log('‚úÖ Profil m√©decin charg√©:', response);
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Cr√©e un profil m√©decin pour l'utilisateur connect√©
   */
  createDoctorProfile(data: any): Observable<{ message: string; profile: DoctorProfile }> {
    console.log('üì§ Cr√©ation du profil m√©decin:', data);
    
    // Validation des donn√©es obligatoires
    if (!data.licenseNumber || !data.specialty || data.yearsExperience === undefined) {
      console.error('‚ùå Donn√©es obligatoires manquantes');
      return throwError(() => new Error('Licence, sp√©cialit√© et exp√©rience sont requis'));
    }

    return this.http.post<{ message: string; profile: DoctorProfile }>(
      `${this.baseUrl}${this.doctorsEndpoint}/profile`, 
      data
    ).pipe(
      tap((response: any) => {
        console.log('‚úÖ Profil m√©decin cr√©√©:', response);
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Met √† jour le profil m√©decin
   */
  updateDoctorProfile(data: any): Observable<{ message: string; profile: DoctorProfile }> {
    console.log('üì§ Mise √† jour du profil m√©decin:', data);

    return this.http.put<{ message: string; profile: DoctorProfile }>(
      `${this.baseUrl}${this.doctorsEndpoint}/profile`, 
      data
    ).pipe(
      tap((response: any) => {
        console.log('‚úÖ Profil m√©decin mis √† jour:', response);
      }),
      catchError(this.handleError)
    );
  }

  /**
   * R√©cup√®re le profil m√©decin de l'utilisateur connect√©
   */
  getMyDoctorProfile(): Observable<{ profile: DoctorProfile }> {
    console.log('üì• Chargement de mon profil m√©decin...');

    return this.http.get<{ profile: DoctorProfile }>(`${this.baseUrl}${this.doctorsEndpoint}/profile/me`).pipe(
      tap((response: any) => {
        console.log('‚úÖ Mon profil m√©decin:', response);
      }),
      catchError((error: HttpErrorResponse) => {
        // Si 404, c'est normal (pas encore de profil)
        if (error.status === 404) {
          console.log('‚ÑπÔ∏è Aucun profil m√©decin trouv√© (normal si pas encore cr√©√©)');
        }
        return throwError(() => error);
      })
    );
  }

  /**
   * Gestion centralis√©e des erreurs HTTP
   */
  private handleError(error: HttpErrorResponse): Observable<never> {
    let errorMessage = '';

    if (error.error instanceof ErrorEvent) {
      // Erreur c√¥t√© client
      errorMessage = `Erreur client: ${error.error.message}`;
      console.error('‚ùå Erreur client:', error.error.message);
    } else {
      // Erreur c√¥t√© serveur
      switch (error.status) {
        case 0:
          errorMessage = 'Impossible de contacter le serveur. V√©rifiez que le backend est d√©marr√© sur http://localhost:4000';
          console.error('‚ùå Backend non accessible');
          break;
        case 400:
          errorMessage = error.error?.message || error.error?.error || 'Requ√™te invalide';
          console.error('‚ùå Requ√™te invalide (400):', error.error);
          break;
        case 401:
          errorMessage = 'Non autoris√©. Veuillez vous reconnecter.';
          console.error('‚ùå Non autoris√© (401) - Token invalide ou expir√©');
          break;
        case 403:
          errorMessage = 'Acc√®s interdit. Vous n\'avez pas les permissions n√©cessaires.';
          console.error('‚ùå Acc√®s interdit (403)');
          break;
        case 404:
          errorMessage = 'Ressource non trouv√©e. L\'endpoint n\'existe pas sur le serveur.';
          console.error('‚ùå Ressource non trouv√©e (404):', error.url);
          break;
        case 500:
          errorMessage = 'Erreur serveur. Veuillez r√©essayer plus tard.';
          console.error('‚ùå Erreur serveur (500):', error.error);
          break;
        default:
          errorMessage = error.error?.message || error.message || `Erreur ${error.status}`;
          console.error(`‚ùå Erreur HTTP ${error.status}:`, error);
      }
    }

    console.error('üìã D√©tails complets de l\'erreur:', error);

    return throwError(() => ({
      message: errorMessage,
      status: error.status,
      originalError: error
    }));
  }
}